{
 "cells": [
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "# 小地域の収入推定\n",
    "\n",
    "```Data```フォルダには、小地域の収入データ(```income_district.csv```)と国勢調査の小地域集計データが格納されています。\n",
    "\n",
    "国勢調査の小地域集計データ（人口構成、労働力構成、住宅形態など）から、その地域の収入を推定することが考えられます。推定のための機械学習・深層学習モデルを構築しなさい。\n",
    "\n",
    "\n",
    "- データを観察・理解する上で、データの構造を説明しながら、適切なデータ整形を行いなさい\n",
    "- データ構造や分析結果に対して、少なくとも二つの図で可視化を行いなさい\n",
    "- モデルの精度を評価し、できるだけ精度が高いモデルを得るよう、適切な特徴量エンジニアリングやモデル選定の考えもまとめなさい\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import geopandas as gpd\n",
    "import pandas as pd\n",
    "from sklearn.preprocessing import StandardScaler, OneHotEncoder\n",
    "from sklearn.impute import SimpleImputer\n",
    "from sklearn.compose import ColumnTransformer\n",
    "from sklearn.pipeline import Pipeline\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.ensemble import RandomForestRegressor\n",
    "from xgboost import XGBRegressor\n",
    "from sklearn.metrics import mean_squared_error\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "# ① GeoJSONファイルの読み込み\n",
    "geo_data = gpd.read_file('13-tokyo-all.geojson')\n",
    "\n",
    "# 収入データと国勢調査の小地域集計データの読み込み\n",
    "directory = 'Data' # ディレクトリのパス\n",
    "data_files = [\n",
    "    'h27_age_df.csv', 'h27_family_df.csv', 'h27_gender_df2.csv',\n",
    "    'h27_house_df.csv', 'h27_house_info_df.csv', 'h27_indusry_df.csv',\n",
    "    'h27_job_df.csv', 'h27_labor_df.csv', 'h27_marriage_df.csv',\n",
    "    'h27_work_status_df.csv', 'income_district.csv'\n",
    "]\n",
    "\n",
    "# 各CSVファイルの読み込み\n",
    "data_frames = [pd.read_csv(f'{directory}/{file}') for file in data_files]\n",
    "\n",
    "# データフレームのマージ\n",
    "merged_data = data_frames[0]\n",
    "for df in data_frames[1:]:\n",
    "    merged_data = pd.merge(merged_data, df, on=['district_id', 'district2_id', 'level_identifier', 'state_name', 'city_name', 'district_name', 'district2_name'])\n",
    "\n",
    "# 収入データの結合\n",
    "merged_data = pd.merge(\n",
    "    merged_data,\n",
    "    data_frames[-1][['area_code', 'income_mean']],\n",
    "    left_on='district_id', \n",
    "    right_on='area_code',   \n",
    "    how='left'\n",
    ")\n",
    "\n",
    "# ② データの読み込み\n",
    "income_data = pd.read_csv('/mnt/data/income_district.csv')\n",
    "census_data = pd.read_csv('/mnt/data/census_data.csv')\n",
    "\n",
    "# データの基本的な情報を表示\n",
    "print(\"Income Data\")\n",
    "print(income_data.info())\n",
    "print(income_data.head())\n",
    "\n",
    "print(\"\\nCensus Data\")\n",
    "print(census_data.info())\n",
    "print(census_data.head())\n",
    "\n",
    "# 必要な前処理を定義\n",
    "numeric_features = census_data.select_dtypes(include=['int64', 'float64']).columns\n",
    "categorical_features = census_data.select_dtypes(include=['object']).columns\n",
    "\n",
    "# 数値特徴量の前処理パイプライン\n",
    "numeric_transformer = Pipeline(steps=[\n",
    "    ('imputer', SimpleImputer(strategy='median')),\n",
    "    ('scaler', StandardScaler())\n",
    "])\n",
    "\n",
    "# カテゴリカル特徴量の前処理パイプライン\n",
    "categorical_transformer = Pipeline(steps=[\n",
    "    ('imputer', SimpleImputer(strategy='constant', fill_value='missing')),\n",
    "    ('onehot', OneHotEncoder(handle_unknown='ignore'))\n",
    "])\n",
    "\n",
    "# 両方の前処理を統合\n",
    "preprocessor = ColumnTransformer(\n",
    "    transformers=[\n",
    "        ('num', numeric_transformer, numeric_features),\n",
    "        ('cat', categorical_transformer, categorical_features)\n",
    "    ])\n",
    "\n",
    "# ターゲット変数（収入）と特徴量の分割\n",
    "X = census_data.drop('income', axis=1)  # 'income'がターゲット変数と仮定\n",
    "y = census_data['income']\n",
    "\n",
    "# データの分割\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
    "\n",
    "# 収入の分布\n",
    "plt.figure(figsize=(10, 6))\n",
    "sns.histplot(y, kde=True)\n",
    "plt.title('Income Distribution')\n",
    "plt.xlabel('Income')\n",
    "plt.ylabel('Frequency')\n",
    "plt.show()\n",
    "\n",
    "# 数値特徴量の相関関係のヒートマップ\n",
    "plt.figure(figsize=(12, 8))\n",
    "correlation_matrix = census_data[numeric_features].corr()\n",
    "sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt='.2f')\n",
    "plt.title('Correlation Matrix of Numeric Features')\n",
    "plt.show()\n",
    "\n",
    "# 前処理とモデルのパイプライン\n",
    "models = {\n",
    "    'Linear Regression': LinearRegression(),\n",
    "    'Random Forest': RandomForestRegressor(n_estimators=100, random_state=42),\n",
    "    'XGBoost': XGBRegressor(n_estimators=100, random_state=42)\n",
    "}\n",
    "\n",
    "for name, model in models.items():\n",
    "    pipeline = Pipeline(steps=[('preprocessor', preprocessor),\n",
    "                               ('model', model)])\n",
    "    pipeline.fit(X_train, y_train)\n",
    "    y_pred = pipeline.predict(X_test)\n",
    "    mse = mean_squared_error(y_test, y_pred)\n",
    "    print(f'{name} Mean Squared Error: {mse:.2f}')\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "base",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.3"
  },
  "orig_nbformat": 4
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
